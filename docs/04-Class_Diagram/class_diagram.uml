@startuml

package UI{
    class MainWindow <<extends QMainWindow>>{
    - gameListView : GameView*
    - gameModel : GameModel*
    - addGameDialog : AddGameDialog*
    - addGameAction : QAction*
    ..Slots..
    + onAddGameDialog()
    + onGameAdded(Game)
    + onGameEdited(Game)
    + onGameDeleted(Game)
    }
    class AddGameDialog <<extends QDialog>>{
        + int id()
        + QString name()
        + QString desc()
        + QList<QString> genre()
    }
    note right of MainWindow
        This should be
        seperated out into
        the UI and a
        Game Controller class.
    end note
}

package "Model / View"{
        class GameView <<extends QAbstractItemView>>{
        - gameModel: GameModel
        - gameItemDelegate : GameItemDelegate
        }
        class GameModel <<extends QAbstractItemModel>>{
        - games : QList<Game>
        + rowCount()
        + data()
        }
        class GameItemDelegate <<extends QStyledItemDelegate>>{
        + paint()
        }
'         GameItemDelegate -> MainWindow : "deleteGame, editGame"
}
package Data{
    class GameLibrary << (S,#FFAA00) Singleton >>{
        + addGame(Game)
        + updateGame(Game)
        + removeGame(int)
        + removeGame(Game)
        - m_games : QList<Game>
    }

    class GameDatabase{
        - QSqlDatabase db
        + open()
        + close()
        + QSqlDatabase database()
        + executeQuery(QString query)
        + beginTransaction()
        + commitTransaction()
        + rollbackTransaction()
    }

    class Game{
        + int id()
        + QString name()
        + QString desc()
        + QList<QString> genres()
        - m_id : int
        - m_name : QString
        - m_desc : QString
        - m_genres : QList<QString>

    }
    note right of Game::genres
        The genres member will change to
        use a dictionary
    end note
}


MainWindow *-- AddGameDialog

MainWindow *-- GameView

GameView *-- GameModel
GameModel *-- GameItemDelegate

GameLibrary o-- Game

GameDatabase --> GameLibrary : Uses
@enduml
